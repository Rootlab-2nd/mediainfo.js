import { join } from 'path'
import fs from 'fs'

import babel from '@rollup/plugin-babel'
import resolve from '@rollup/plugin-node-resolve'
import terser from '@rollup/plugin-terser'
import virtual from '@rollup/plugin-virtual'

// Global variable name for UMD build
const umdName = 'MediaInfo'

const srcDir = join(__dirname, 'src')
const distDir = join(__dirname, 'dist')
const esmBundleDir = join(distDir, 'esm-bundle')
const umdDir = join(distDir, 'umd')

const mediaInfoModuleContent = fs
  .readFileSync(join(__dirname, 'build', 'MediaInfoModule.browser.js'))
  .toString()

export default {
  input: join(srcDir, 'index.ts'),
  output: [
    {
      format: 'esm',
      file: join(esmBundleDir, 'index.js'),
      sourcemap: true,
    },
    {
      format: 'esm',
      file: join(esmBundleDir, 'index.min.js'),
      plugins: [terser()],
      sourcemap: true,
    },
    {
      format: 'umd',
      file: join(umdDir, 'index.js'),
      name: umdName,
      sourcemap: true,
    },
    {
      format: 'umd',
      file: join(umdDir, 'index.min.js'),
      name: umdName,
      plugins: [terser()],
      sourcemap: true,
    },
  ],
  plugins: [
    resolve({ extensions: ['.ts'] }),

    // The module loader generated by emscripten is different for each environment.
    // For the bundler we just inject the correct content.
    virtual({ 'src/MediaInfoModule': mediaInfoModuleContent }),

    babel({
      babelHelpers: 'bundled',
      envName: 'ESM_ROLLUP',
      exclude: ['./node_modules/**', './src/cli.ts'],
      extensions: ['.ts'],
      include: ['./src/**'],
    }),
  ],
}
